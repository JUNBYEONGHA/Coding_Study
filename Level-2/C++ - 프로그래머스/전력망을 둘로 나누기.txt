#include <string>
#include <vector>
#include <algorithm>

using namespace std;

bool MAP[201][201];
vector<bool> visit;

int DFS(int index , const int n)
{
    if(visit[index]) return 0;
    visit[index] = true;
    
    int returnNum = 1;
    for(int next = 1 ; next <= n ; next++)
    {
        if(!MAP[index][next]) continue;
        
        returnNum += DFS(next , n);
    }
    return returnNum;
}

int solution(int n, vector<vector<int>> wires) {
    int answer = 201;
    
    for (int i = 0 ; i < wires.size() ; i++)
    {
        int u = wires[i][0];
        int v = wires[i][1];
        MAP[u][v] = MAP[v][u] = true;
    }
    
     for (int i = 0 ; i < wires.size() ; i++)
    {
        int u = wires[i][0];
        int v = wires[i][1];
        MAP[u][v] = MAP[v][u] = false;
        
        vector<int> count;
        visit = vector<bool>(n+1,false);
        for(int j = 1; j <= n ; j++)
        {
            int temp = DFS(j,n);
            if(!temp) continue;
            count.push_back(temp);
        }
        answer = min(answer , abs(count[0] - count[1]));
        MAP[u][v] = MAP[v][u] = true;
    }
    return answer;
}