#include <string>
#include <vector>
#include <queue>

using namespace std;

int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};

bool BFS(int a , int b , vector<string> place)
{
    bool visit[5][5] = {false,}, flag = true;
    queue<pair<pair<int,int>,int>> Q;
    Q.push(make_pair(make_pair(a,b),0));
    visit[a][b] = true;
    
    while(!Q.empty())
    {
        int x = Q.front().first.first;
        int y = Q.front().first.second;
        int d = Q.front().second;
        Q.pop();
        
        if(d == 2) continue;
        for(int i = 0 ; i < 4 ; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx >= 0 && ny >= 0 && nx < 5 && ny < 5)
            {
                if(visit[nx][ny] == false)
                {
                    if(place[nx][ny] == 'O')
                    {
                        visit[nx][ny] = true;
                        Q.push(make_pair(make_pair(nx,ny),d+1));
                    }
                    else if(place[nx][ny] == 'P')
                    {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}
int Find_Answer(vector<string> place)
{
    for(int i = 0 ; i < place.size() ; i++)
    {
        for(int j = 0 ; j < place[i].size() ; j++)
        {
            if(place[i][j] == 'P')
            {
                if(BFS(i,j,place) == false)
                {
                    return 0;
                }
            }
        }
    }
    return 1;
}

vector<int> solution(vector<vector<string>> places) {
    vector<int> answer;
    for(int i = 0 ; i < places.size(); i++)
    {
        answer.push_back(Find_Answer(places[i]));
    }
    
    return answer;
}